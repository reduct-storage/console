name: ci
on:
  push:
    branches: [ main, stable ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, stable ]
jobs:
  test:
    name: "Install dependencies and test app"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install modules
        run: npm install
      - name: Run ESLint
        run: npm run lint
      - name: Run Tests
        run: npm test -- --watchAll=false

  deploy:
    name: Publish Docker image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ (github.ref == 'refs/heads/main') || (startsWith(github.event.ref, 'refs/tags/v')) }}
    steps:
      - uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{github.repository}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  make_release:
    runs-on: ubuntu-latest
    needs: test
    name: Make release
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: Copy changes from CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - uses: actions/checkout@v2
      - name: Install modules
        run: npm install
      - name: Build app
        run: npm run build
        env:
          CI: false
      - name: Tar built application
        run: tar -czvf web-console.build.tar.gz build
      - name: Upload  artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: web-console.build.tar.gz
          asset_name: web-console.build.tar.gz
          asset_content_type: application/gzip
